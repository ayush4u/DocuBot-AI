{
  "openapi": "3.0.0",
  "info": {
    "title": "Enhanced RAG Chatbot API",
    "version": "2.0.0",
    "description": "Comprehensive API documentation for the Enhanced RAG Chatbot with JWT Authentication, Dual Database Architecture, and Free AI Components",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "Development server"
    },
    {
      "url": "https://api.yourapp.com",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token for authentication. Format: 'Bearer <token>'"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "isVerified": {
            "type": "boolean",
            "description": "Email verification status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Account creation timestamp"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT authentication token"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "expiresIn": {
            "type": "string",
            "description": "Token expiration time"
          }
        }
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "User's message or question",
            "minLength": 1,
            "maxLength": 2000
          },
          "userId": {
            "type": "string",
            "description": "User ID for conversation context (optional)"
          }
        },
        "required": ["message"]
      },
      "ChatResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "description": "AI-generated response"
          },
          "conversationId": {
            "type": "string",
            "description": "Unique conversation identifier"
          },
          "context": {
            "type": "object",
            "properties": {
              "relevantChunks": {
                "type": "integer",
                "description": "Number of relevant document chunks used"
              },
              "chunksUsed": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "filename": {
                      "type": "string"
                    },
                    "score": {
                      "type": "number",
                      "description": "Relevance score (0-1)"
                    },
                    "preview": {
                      "type": "string",
                      "description": "Text preview of the chunk"
                    }
                  }
                }
              }
            }
          },
          "performance": {
            "type": "object",
            "properties": {
              "responseTime": {
                "type": "number",
                "description": "Response time in milliseconds"
              },
              "embeddingTime": {
                "type": "number"
              },
              "searchTime": {
                "type": "number"
              },
              "llmTime": {
                "type": "number"
              }
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "description": "LLM model used"
              },
              "temperature": {
                "type": "number"
              },
              "tokensUsed": {
                "type": "integer"
              },
              "cacheHit": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "DocumentUpload": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "PDF file to upload"
          }
        },
        "required": ["file"]
      },
      "UploadResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Upload success message"
          },
          "filename": {
            "type": "string",
            "description": "Uploaded file name"
          },
          "documentId": {
            "type": "string",
            "description": "Unique document identifier"
          },
          "processing": {
            "type": "object",
            "properties": {
              "pages": {
                "type": "integer",
                "description": "Number of pages processed"
              },
              "chunks": {
                "type": "integer",
                "description": "Number of text chunks created"
              },
              "vectors": {
                "type": "integer",
                "description": "Number of vectors generated"
              },
              "processingTime": {
                "type": "number",
                "description": "Processing time in milliseconds"
              }
            }
          },
          "storage": {
            "type": "object",
            "properties": {
              "supabase": {
                "type": "boolean",
                "description": "Stored in Supabase database"
              },
              "chromadb": {
                "type": "boolean",
                "description": "Stored in ChromaDB vector store"
              },
              "fallback": {
                "type": "boolean",
                "description": "Using in-memory fallback"
              }
            }
          }
        }
      },
      "SystemStats": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string",
            "description": "API version"
          },
          "components": {
            "type": "object",
            "properties": {
              "database": {
                "type": "object",
                "properties": {
                  "supabase": {
                    "type": "boolean"
                  },
                  "inMemory": {
                    "type": "boolean"
                  }
                }
              },
              "vectorStore": {
                "type": "object",
                "properties": {
                  "chromadb": {
                    "type": "boolean"
                  },
                  "collections": {
                    "type": "integer"
                  }
                }
              },
              "embeddings": {
                "type": "object",
                "properties": {
                  "service": {
                    "type": "string"
                  },
                  "model": {
                    "type": "string"
                  },
                  "initialized": {
                    "type": "boolean"
                  }
                }
              },
              "llm": {
                "type": "object",
                "properties": {
                  "models": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "currentModel": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "statistics": {
            "type": "object",
            "properties": {
              "totalDocuments": {
                "type": "integer"
              },
              "totalChunks": {
                "type": "integer"
              },
              "totalQueries": {
                "type": "integer"
              },
              "averageResponseTime": {
                "type": "number"
              },
              "cacheHitRate": {
                "type": "number"
              }
            }
          },
          "features": {
            "type": "object",
            "properties": {
              "freeAndOpenSource": {
                "type": "boolean"
              },
              "localEmbeddings": {
                "type": "boolean"
              },
              "contextMemory": {
                "type": "boolean"
              },
              "multiModelLLM": {
                "type": "boolean"
              },
              "vectorSearch": {
                "type": "boolean"
              },
              "semanticCache": {
                "type": "boolean"
              },
              "smartChunking": {
                "type": "boolean"
              },
              "documentSummaries": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type"
          },
          "message": {
            "type": "string",
            "description": "Detailed error message"
          },
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Health check endpoint",
        "tags": ["Health"],
        "responses": {
          "200": {
            "description": "Server is running",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Backend is running!"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Register a new user account",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "description": "User's password (minimum 6 characters)"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "verificationRequired": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login with email and password",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify": {
      "post": {
        "summary": "Verify email address",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "code": {
                    "type": "string",
                    "description": "6-digit verification code"
                  }
                },
                "required": ["email", "code"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid verification code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/resend-verification": {
      "post": {
        "summary": "Resend verification email",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "summary": "Get user profile information",
        "tags": ["User"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chats": {
      "get": {
        "summary": "Get all chats for the authenticated user",
        "tags": ["Chat Management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of user's chats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "chats": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Chat ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Chat name"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "messageCount": {
                            "type": "integer"
                          },
                          "hasDocuments": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new chat",
        "tags": ["Chat Management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Chat name",
                    "minLength": 1,
                    "maxLength": 100
                  }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "chat": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{chatId}": {
      "delete": {
        "summary": "Delete a specific chat",
        "tags": ["Chat Management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the chat to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{chatId}/messages": {
      "post": {
        "summary": "Send message to a specific chat",
        "tags": ["Chat Management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the chat to send message to"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "User's message",
                    "minLength": 1,
                    "maxLength": 2000
                  }
                },
                "required": ["message"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message sent and AI response received",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "response": {
                      "type": "string",
                      "description": "AI-generated response"
                    },
                    "sources": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "filename": {
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Source documents used for RAG response"
                    },
                    "messageId": {
                      "type": "string",
                      "description": "ID of the stored message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid message or chat not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Chat not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chats/{chatId}/upload": {
      "post": {
        "summary": "Upload PDF document to a specific chat",
        "tags": ["Chat Management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the chat to upload document to"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "PDF file to upload"
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document uploaded and processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "document": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "textLength": {
                          "type": "integer"
                        },
                        "pages": {
                          "type": "integer"
                        },
                        "processingResults": {
                          "type": "object",
                          "properties": {
                            "databaseStored": {
                              "type": "boolean"
                            },
                            "vectorStored": {
                              "type": "boolean"
                            },
                            "ragEnabled": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid file format or upload error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chats/{chatId}/documents": {
      "get": {
        "summary": "Get list of documents in a specific chat",
        "tags": ["Chat Management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "chatId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the chat"
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents in the chat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "chatId": {
                      "type": "string"
                    },
                    "documents": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "filename": {
                            "type": "string"
                          },
                          "uploadedAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "size": {
                            "type": "integer"
                          },
                          "pages": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/stats": {
      "get": {
        "summary": "Get comprehensive system statistics and health",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "System statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemStats"
                }
              }
            }
          },
          "500": {
            "description": "Failed to retrieve system stats",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/system/health": {
      "get": {
        "summary": "Health check for system components",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "System health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["healthy", "degraded", "unhealthy"]
                    },
                    "components": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "string",
                          "enum": ["healthy", "degraded", "unhealthy"]
                        },
                        "vectorStore": {
                          "type": "string",
                          "enum": ["healthy", "degraded", "unhealthy"]
                        },
                        "embeddings": {
                          "type": "string",
                          "enum": ["healthy", "degraded", "unhealthy"]
                        },
                        "llm": {
                          "type": "string",
                          "enum": ["healthy", "degraded", "unhealthy"]
                        }
                      }
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Health",
      "description": "API health and status endpoints"
    },
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints"
    },
    {
      "name": "User",
      "description": "User profile and account management"
    },
    {
      "name": "Chat Management",
      "description": "ChatGPT-like multi-chat system with document upload per chat"
    },
    {
      "name": "System",
      "description": "System monitoring and statistics endpoints"
    }
  ]
}
